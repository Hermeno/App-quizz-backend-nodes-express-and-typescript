generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// ðŸ”¹ UsuÃ¡rios (alunos e professores)
//
model Usuario {
  id       Int      @id @default(autoincrement())
  nome     String
  email    String   @unique
  senha    String
  tipo     String // 'aluno' | 'professor'
  criadoEm DateTime @default(now())

  // Relacionamentos
  exames     Exame[]     @relation("CriadorExames")
  respostas  Resposta[]
  pagamentos Pagamento[]
  tentativas Tentativa[]
}

//
// ðŸ”¹ Exames criados por professores
//
model Exame {
  id              Int      @id @default(autoincrement())
  titulo          String
  descricao       String?
  duracao         Int?
  preco           Float    @default(0)
  numeroPerguntas Int      @default(20) // ðŸ”¸ define quantas perguntas o exame tem (20, 40, etc.)
  estado          String   @default("ativo") // 'ativo' | 'inativo'
  criadoEm        DateTime @default(now())
  criadorId       Int

  // Relacionamentos
  criador       Usuario         @relation("CriadorExames", fields: [criadorId], references: [id])
  perguntas     Pergunta[]      @relation("ExamePerguntas")
  pagamentos    Pagamento[]
  tentativas    Tentativa[]
  ExamePergunta ExamePergunta[]
}

//
// ðŸ”¹ Perguntas dos exames
//
model Pergunta {
  id       Int     @id @default(autoincrement())
  exameId  Int?
  pergunta String?
  imagem   String?
  tipo     String // 'texto', 'imagem', 'misto'

  // Alternativas
  opcaoA  String?
  opcaoB  String?
  opcaoC  String?
  opcaoD  String?
  opcaoE  String?

  correta   String // Letra: 'opcaoA', 'opcaoB', 'opcaoC', 'opcaoD', 'opcaoE'

  exame         Exame?          @relation("ExamePerguntas", fields: [exameId], references: [id])
  respostas     Resposta[]
  ExamePergunta ExamePergunta[]
}

//
// ðŸ”¹ AssociaÃ§Ã£o entre exames e perguntas (permite um exame usar perguntas de vÃ¡rios temas)
//
model ExamePergunta {
  id         Int  @id @default(autoincrement())
  exameId    Int
  perguntaId Int
  ordem      Int?

  exame    Exame    @relation(fields: [exameId], references: [id])
  pergunta Pergunta @relation(fields: [perguntaId], references: [id])
}

//
// ðŸ”¹ Respostas dos alunos
//
model Resposta {
  id           Int      @id @default(autoincrement())
  usuarioId    Int
  perguntaId   Int
  resposta     String
  correta      Boolean
  respondidoEm DateTime @default(now())

  usuario  Usuario  @relation(fields: [usuarioId], references: [id])
  pergunta Pergunta @relation(fields: [perguntaId], references: [id])
}

//
// ðŸ”¹ Pagamentos (via eMola / M-Pesa)
//
model Pagamento {
  id         Int      @id @default(autoincrement())
  usuarioId  Int
  exameId    Int
  metodo     String // 'mpesa' | 'emola'
  valor      Float
  status     String // 'pendente' | 'pago' | 'falhado'
  referencia String?
  data       DateTime @default(now())

  usuario Usuario @relation(fields: [usuarioId], references: [id])
  exame   Exame   @relation(fields: [exameId], references: [id])
}

//
// ðŸ”¹ Tentativas de exame (para controle das 2 chances)
//
model Tentativa {
  id        Int      @id @default(autoincrement())
  usuarioId Int
  exameId   Int
  numero    Int // 1 ou 2
  nota      Float?
  concluido Boolean  @default(false)
  criadoEm  DateTime @default(now())

  usuario Usuario @relation(fields: [usuarioId], references: [id])
  exame   Exame   @relation(fields: [exameId], references: [id])
}
